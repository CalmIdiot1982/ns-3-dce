From edfe4d97bdef565f30df68dd4fc26f48007bdab4 Mon Sep 17 00:00:00 2001
From: Alexander Afanasyev <alexander.afanasyev@ucla.edu>
Date: Wed, 19 Oct 2011 21:13:15 -0700
Subject: [PATCH 2/2] A new templated static method
 Ipv4RoutingHelper::GetRouting that allows search for
 any routing protocol

Small modification to Ipv4StaticRouting table format. It now prints
metric information for each route.
---
 src/internet/helper/ipv4-routing-helper.h |   31 +++++++++++++++++++++++++++++
 src/internet/model/ipv4-static-routing.cc |   12 +++++++---
 src/internet/model/ipv4-static-routing.h  |    2 +-
 3 files changed, 40 insertions(+), 5 deletions(-)

diff --git a/src/internet/helper/ipv4-routing-helper.h b/src/internet/helper/ipv4-routing-helper.h
index 8abfab2..b06c5f3 100644
--- a/src/internet/helper/ipv4-routing-helper.h
+++ b/src/internet/helper/ipv4-routing-helper.h
@@ -23,6 +23,7 @@
 #include "ns3/ptr.h"
 #include "ns3/nstime.h"
 #include "ns3/output-stream-wrapper.h"
+#include "ns3/ipv4-list-routing.h"
 
 namespace ns3 {
 
@@ -107,11 +108,41 @@ public:
    */
   void PrintRoutingTableEvery (Time printInterval, Ptr<Node> node, Ptr<OutputStreamWrapper> stream) const;
 
+  template<class T>
+  static Ptr<T> GetRouting (Ptr<Ipv4RoutingProtocol> ipv4rp, T*);
+  
 private:
   void Print (Ptr<Node> node, Ptr<OutputStreamWrapper> stream) const;
   void PrintEvery (Time printInterval, Ptr<Node> node, Ptr<OutputStreamWrapper> stream) const;
 };
 
+// This function does a recursive search for a requested routing protocol.
+// Strictly speaking this recursion is not necessary, but why not?
+template<class T>
+Ptr<T> Ipv4RoutingHelper::GetRouting (Ptr<Ipv4RoutingProtocol> ipv4rp, T* type)
+{
+  if (ipv4rp == 0) return 0;
+
+  if (DynamicCast<T> (ipv4rp))
+    {
+      return DynamicCast<T> (ipv4rp); 
+    } 
+  else if (DynamicCast<Ipv4ListRouting> (ipv4rp))
+    {
+      Ptr<Ipv4ListRouting> lrp = DynamicCast<Ipv4ListRouting> (ipv4rp);
+      for (uint32_t i = 0; i < lrp->GetNRoutingProtocols ();  i++)
+        {
+          int16_t priority;
+          Ptr<T> ret = GetRouting (lrp->GetRoutingProtocol (i, priority), type);
+          if (ret != 0)
+            {
+              return ret;
+            }
+        }
+    }
+  return 0;
+}
+
 } // namespace ns3
 
 
diff --git a/src/internet/model/ipv4-static-routing.cc b/src/internet/model/ipv4-static-routing.cc
index 2784403..05f41a4 100644
--- a/src/internet/model/ipv4-static-routing.cc
+++ b/src/internet/model/ipv4-static-routing.cc
@@ -708,11 +708,16 @@ Ipv4StaticRouting::PrintRoutingTable (Ptr<OutputStreamWrapper> stream) const
   std::ostream* os = stream->GetStream ();
   if (GetNRoutes () > 0)
     {
+      *os << "Node: " << m_ipv4->GetObject<Node> ()->GetId () << std::endl;
       *os << "Destination     Gateway         Genmask         Flags Metric Ref    Use Iface" << std::endl;
-      for (uint32_t j = 0; j < GetNRoutes (); j++)
+      for (std::list<std::pair<ns3::Ipv4RoutingTableEntry*, unsigned int> >::const_iterator j = m_networkRoutes.begin (); 
+           j != m_networkRoutes.end (); 
+           j++) 
         {
           std::ostringstream dest, gw, mask, flags;
-          Ipv4RoutingTableEntry route = GetRoute (j);
+          Ipv4RoutingTableEntry route = j->first;
+          uint32_t metric = j->second;
+          
           dest << route.GetDest (); 
           *os << std::setiosflags (std::ios::left) << std::setw (16) << dest.str ();
           gw << route.GetGateway (); 
@@ -729,8 +734,7 @@ Ipv4StaticRouting::PrintRoutingTable (Ptr<OutputStreamWrapper> stream) const
               flags << "GS";
             }
           *os << std::setiosflags (std::ios::left) << std::setw (6) << flags.str ();
-          // Metric not implemented
-          *os << "-" << "      ";
+          *os << std::setiosflags (std::ios::left) << std::setw (6) << metric;
           // Ref ct not implemented
           *os << "-" << "      ";
           // Use not implemented
diff --git a/src/internet/model/ipv4-static-routing.h b/src/internet/model/ipv4-static-routing.h
index 8ae6797..d98409e 100644
--- a/src/internet/model/ipv4-static-routing.h
+++ b/src/internet/model/ipv4-static-routing.h
@@ -374,7 +374,7 @@ public:
 protected:
   virtual void DoDispose (void);
 
-private:
+protected:
   typedef std::list<std::pair <Ipv4RoutingTableEntry *, uint32_t> > NetworkRoutes;
   typedef std::list<std::pair <Ipv4RoutingTableEntry *, uint32_t> >::const_iterator NetworkRoutesCI;
   typedef std::list<std::pair <Ipv4RoutingTableEntry *, uint32_t> >::iterator NetworkRoutesI;
-- 
1.7.7.2

