# HG changeset patch
# User Hajime Tazaki <tazaki@nict.go.jp>
# Date 1357570470 -32400
# Node ID f33bb18b500fed0624a0f786a14d8cf5c248fac6
# Parent  a89379e80630b549068e87e1ac72dcc1c3b27638
more tests for ns-3-linux

diff --git a/example/dce-trinity.cc b/example/dce-trinity.cc
new file mode 100644
--- /dev/null
+++ b/example/dce-trinity.cc
@@ -0,0 +1,99 @@
+#include "ns3/core-module.h"
+#include "ns3/network-module.h"
+#include "ns3/dce-module.h"
+#include "ns3/point-to-point-module.h"
+#include "ns3/csma-module.h"
+#include "ns3/wifi-module.h"
+#include "ns3/mobility-module.h"
+#include "ns3/internet-module.h"
+#include <fstream>
+
+using namespace ns3;
+NS_LOG_COMPONENT_DEFINE ("DceLinux");
+
+static void RunIp (Ptr<Node> node, Time at, std::string str)
+{
+  DceApplicationHelper process;
+  ApplicationContainer apps;
+  process.SetBinary ("ip");
+  process.SetStackSize (1<<16);
+  process.ResetArguments();
+  process.ParseArguments(str.c_str ());
+  apps = process.Install (node);
+  apps.Start (at);
+}
+
+void
+PrintTcpFlags (std::string key, std::string value)
+{
+  NS_LOG_INFO (key << "=" << value);
+}
+
+int main (int argc, char *argv[])
+{
+  CommandLine cmd;
+  char linkType = 'p'; // P2P
+  bool reliable = true;
+
+  cmd.Parse (argc, argv);
+  NodeContainer nodes;
+  nodes.Create (2);
+
+  NetDeviceContainer devices;
+  PointToPointHelper p2p;
+  p2p.SetDeviceAttribute ("DataRate", StringValue ("5Gbps"));
+  p2p.SetChannelAttribute ("Delay", StringValue ("1ms"));
+  devices = p2p.Install (nodes);
+  p2p.EnablePcapAll ("trinity");
+
+  DceManagerHelper processManager;
+  // processManager.SetLoader ("ns3::DlmLoaderFactory");
+  //  processManager.SetLoader ("ns3::CopyLoaderFactory");
+  processManager.SetTaskManagerAttribute ("FiberManagerType",
+                                          StringValue ("UcontextFiberManager"));
+  processManager.SetNetworkStack("ns3::LinuxSocketFdFactory", "Library", StringValue ("liblinux.so"));
+  LinuxStackHelper stack;
+  stack.Install (nodes);
+
+  Ipv4AddressHelper address;
+  address.SetBase ("10.0.0.0", "255.255.255.0");
+  Ipv4InterfaceContainer interfaces = address.Assign (devices);
+
+  processManager.Install (nodes);
+
+
+  for (int n=0; n < 2; n++)
+    {
+      RunIp (nodes.Get (n), Seconds (0.2), "link show");
+      RunIp (nodes.Get (n), Seconds (0.3), "route show table all");
+      RunIp (nodes.Get (n), Seconds (0.4), "addr list");
+    }
+
+  DceApplicationHelper process;
+  ApplicationContainer apps;
+
+  process.SetBinary ("tcp-server");
+  process.ResetArguments ();
+  process.SetStackSize (1<<16);
+  apps = process.Install (nodes.Get (0));
+  apps.Start (Seconds (1.0));
+
+  process.SetBinary ("trinity");
+  process.SetUid (1000);
+  //process.SetBinary ("tcp-client");
+  process.ResetArguments ();
+  //  process.ParseArguments ("-L");
+  //process.ParseArguments ("10.0.0.1");
+  apps = process.Install (nodes.Get (1));
+  apps.Start (Seconds (1.5));
+
+  // print tcp sysctl value
+  LinuxStackHelper::SysctlGet (nodes.Get (0), Seconds (1.0), 
+                               ".net.ipv4.tcp_available_congestion_control", &PrintTcpFlags);
+
+  Simulator::Stop (Seconds (200.0));
+  Simulator::Run ();
+  Simulator::Destroy ();
+
+  return 0;
+}
diff --git a/model/dce-alloc.cc b/model/dce-alloc.cc
--- a/model/dce-alloc.cc
+++ b/model/dce-alloc.cc
@@ -74,3 +74,8 @@
 {
   return sysconf(_SC_PAGESIZE);
 }
+void *dce_memalign(size_t boundary, size_t size)
+{
+  // XXX
+  return dce_malloc (size);
+}
diff --git a/model/dce-stdlib.h b/model/dce-stdlib.h
--- a/model/dce-stdlib.h
+++ b/model/dce-stdlib.h
@@ -22,6 +22,7 @@
 int dce_setenv (const char *name, const char *value, int overwrite);
 int dce_unsetenv (const char *name);
 int dce_clearenv (void);
+void *dce_memalign(size_t boundary, size_t size);
 
 #ifdef __cplusplus
 }
diff --git a/model/libc-dce.cc b/model/libc-dce.cc
--- a/model/libc-dce.cc
+++ b/model/libc-dce.cc
@@ -96,6 +96,10 @@
 #include <langinfo.h>
 #include <sys/vfs.h>
 #include <termio.h>
+#include <sys/ipc.h>
+#include <sys/shm.h>
+#include <malloc.h>
+#include <sys/prctl.h>
 
 extern void __cxa_finalize (void *d);
 extern int __cxa_atexit (void (*func) (void *), void *arg, void *d);
diff --git a/model/libc-ns3.h b/model/libc-ns3.h
--- a/model/libc-ns3.h
+++ b/model/libc-ns3.h
@@ -102,6 +102,7 @@
 DCE (clearenv)
 NATIVE (qsort)
 DCE (abort)
+DCE (memalign)
 
 // STRING.H
 NATIVE (strerror)
@@ -313,6 +314,7 @@
 DCE (open)
 DCE (open64)
 DCE (unlinkat)
+DCE (creat)
 
 // TIME.H
 DCE (nanosleep)
@@ -544,6 +546,15 @@
 DCE (tcgetattr)
 DCE (tcsetattr)
 
+/* shm.h */
+NATIVE (shmget)
+NATIVE (shmat)
+NATIVE (shmctl)
+NATIVE (shmdt)
+
+NATIVE (prctl)
+NATIVE (chmod)
+
 ///////////////////// END OF INVENTAIRE //////////////////////////////////////////////////
 
 // ctype.h
diff --git a/wscript b/wscript
--- a/wscript
+++ b/wscript
@@ -280,6 +280,10 @@
                        target='bin/dce-tcp-ns3-nsc-comparison',
                        source=['example/dce-tcp-ns3-nsc-comparison.cc'])
 
+    module.add_example(needed = ['core', 'network', 'dce', 'wifi', 'point-to-point', 'csma', 'mobility' ],
+                       target='bin/dce-trinity',
+                       source=['example/dce-trinity.cc'])
+
 # Add a script to build system 
 def build_a_script(bld, name, needed = [], **kw):
     external = [i for i in needed if not i == name]
